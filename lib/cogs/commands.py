from discord.ext import commands
from discord import Interaction, Embed, Colour, Status, Member, Object, app_commands
from typing import Optional
from json import load
from os.path import join
from sqlite3 import OperationalError
from ..db import database as db

class Commands(commands.Cog):
    def __init__(self, client: commands.Bot):
        self.client = client
        with open(join("data/json/commands.json"), "r", encoding="utf-8") as json:
            self.c_info = load(json)

    @commands.Cog.listener()
    async def on_ready(self):
        print(f"{self.__cog_name__} cog is ready!")

    @app_commands.command(name="—Å–µ—Ä–≤–µ—Ä", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞.")
    @app_commands.describe()
    async def server(self, interaction: Interaction):
        await interaction.response.defer(thinking=True)
        embed = Embed(color=Colour.from_rgb(0, 0, 0))
        live_members = list(filter(lambda x: x.bot == False, interaction.guild.members))
        administrators = list(filter(lambda x: x.guild_permissions.administrator == True and x.name != interaction.guild.owner.name, live_members))
        embed.set_author(name=interaction.guild.name, icon_url=interaction.guild.icon.url)
        embed.add_field(
            name="üëë –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–Ø",
            value=f"```" + ", ".join([i.name for i in administrators]) + "```",
            inline=False
        )
        embed.add_field(
            name=f"üë•  –£–ß–ê–°–¢–ù–ò–ö–ò: [{interaction.guild.member_count}]",
            value=f"```–û–Ω–ª–∞–π–Ω: {len(list(filter(lambda x: x.status == Status.online, interaction.guild.members)))} | "
                f"–û—Ñ—Ñ–ª–∞–π–Ω: {len(list(filter(lambda x: x.status == Status.offline, interaction.guild.members)))} | "
                f"–ë–æ—Ç—ã: {len(list(filter(lambda x: x.bot == True, interaction.guild.members)))}"
                "```",
            inline=False
        )
        embed.add_field(
            name=f"üìä –ö–ê–ù–ê–õ–´ –ò –ö–ê–¢–ï–ì–û–†–ò–ò: [{len(interaction.guild.channels)}]",
            value=f"```–¢–µ–∫—Å—Ç: {len(interaction.guild.text_channels)} | "
            f"–§–æ—Ä—É–º: {len(interaction.guild.forums)} | "
            f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ: {len(list(filter(lambda x: x.is_news() == True, interaction.guild.text_channels)))}```"
            f"```–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(interaction.guild.categories)} | "
            f"–ì–æ–ª–æ—Å–æ–≤—ã–µ: {len(interaction.guild.voice_channels)} | "
            f"–°—Ü–µ–Ω—ã: {len(interaction.guild.stage_channels)}```",
            inline=False
        )
        embed.add_field(
            name=f"üé≠ –†–û–õ–ò –ù–ê –°–ï–†–í–ï–†–ï: [{len(interaction.guild.roles)}]",
            value="```" + ",\n".join([i.name for i in interaction.guild.roles]) + "```",
            inline=False
        )
        embed.add_field(
            name=f"ü™Ñ –≠–ú–û–î–ó–ò –ò –°–¢–ò–ö–ï–†–´: [{len(interaction.guild.emojis)}]",
            value=f"```–û–±—ã—á–Ω—ã–µ: {len(list(filter(lambda x: x.animated == False, interaction.guild.emojis)))} | "
            f"–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {len(list(filter(lambda x: x.animated == True, interaction.guild.emojis)))} | "
            f"–°—Ç–∏–∫–µ—Ä—ã: {len(interaction.guild.stickers)}```",
            inline=False
        )
        embed.add_field(
            name=f"üóìÔ∏è–î–ê–¢–ê –°–û–ó–î–ê–ù–ò–Ø",
            value=f"```{interaction.guild.created_at.day} | {interaction.guild.created_at.month} | {interaction.guild.created_at.year}```",
            inline=False
        )
        embed.set_thumbnail(url=interaction.guild.icon.url)
        await interaction.followup.send(embed=embed)

    @app_commands.command(name="–æ—á–∏—Å—Ç–∫–∞", description="–û—á–∏—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞.")
    @app_commands.describe(
        number="–û—Ç–≤–µ—á–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ"
    )
    async def purge(self, interaction: Interaction, number: Optional[int] = 1):
        await interaction.response.defer(ephemeral=True, thinking=True)
        await interaction.channel.purge(limit=number)
        await interaction.followup.send(f"```–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {number} —Å–æ–æ–±—â–µ–Ω–∏–π!```", ephemeral=True)

    @app_commands.command(name="–∞–≤–∞—Ç–∞—Ä", description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @app_commands.describe(
        mem="–û—Ç–≤–µ—á–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∞ –∫–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"
    )
    async def avatar(self, interaction: Interaction, mem: Optional[Member] = None):
        await interaction.response.defer(thinking=True)
        if mem is None:
            mem = interaction.user
        embed = Embed(color=Colour.from_rgb(0, 0, 0))
        embed.set_author(
            name=f"{mem.name}",
            icon_url=mem.avatar.url
        )
        embed.set_image(url=mem.avatar.url)
        embed.set_footer(text=f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ {interaction.user.name}", icon_url=interaction.user.avatar.url)
        await interaction.followup.send(embed=embed)

    @app_commands.command(name="—Å–ø–∏—Å–æ–∫", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    @app_commands.guilds(Object(1031195234379513937))
    async def guild_info(self, interaction: Interaction):
        await interaction.response.defer(thinking=True, ephemeral=True)
        info = "\n".join([guild.name for guild in self.client.guilds]), sum([1 for _ in self.client.guilds])
        await interaction.followup.send(info)

    @app_commands.command(name="—Å–±—Ä–æ—Å", description="–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    @app_commands.describe(
        command_name="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ —Å–±—Ä–æ—Å–∏—Ç—å"
    )
    async def reboot(self, interaction: Interaction, command_name: str):
        await interaction.response.defer(thinking=True, ephemeral=True)
        commands = ["—Ä–æ–ª—å", "–ø—Ä–∏–≤–∞—Ç", "rss"]
        if command_name not in commands:
            await interaction.followup.send("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            return

        if command_name == commands[0]:
            for channelId in db.column("SELECT ChannelId FROM rolesIDs WHERE GuildID = (?)", interaction.guild_id):
                channel = interaction.guild.get_channel(int(channelId))
                try:
                    mess = await channel.fetch_message(int(db.record("SELECT MessageId FROM rolesIDs WHERE GuildID = (?) AND ChannelId = (?)", interaction.guild_id, channelId)[0]))
                except TypeError:
                    await interaction.followup.send("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")
                await mess.clear_reactions()
                db.execute("DELETE FROM rolesIDs WHERE ChannelId = (?)", channelId)
                db.commit()

        elif command_name == commands[1]:
            for channelId in db.column("SELECT ChannelId FROM roomsCreator WHERE GuildID = (?)", interaction.guild_id):
                db.execute("DELETE FROM roomsCreator WHERE ChannelId = (?)", channelId)
                db.commit()

        elif command_name == commands[2]:
            for channelId in db.column("SELECT ChannelId FROM rss WHERE GuildID = (?)", interaction.guild_id):
                db.execute("DELETE FROM rss WHERE ChannelId = (?)", channelId)
                db.commit()

        await interaction.followup.send("–£—Å–ø–µ—à–Ω–æ!")
        return

    @app_commands.command(name="–ø–æ–º–æ—â—å", description="–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã")
    @app_commands.describe()
    async def help(self, interaction: Interaction):
        await interaction.response.defer(thinking=True)
        embed = Embed(title="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", description="–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã (–Ω–∞ –≤–µ—Ç–∫–∞—Ö –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç).\n–ë–æ—Ç –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏.")
        for dict_ in self.c_info:
            embed.add_field(
                name="",
                value=dict_["description"],
                inline=False
            )
        await interaction.followup.send(embed=embed)

    @app_commands.command(name="—Å—Ç–∞—Ç—É—Å", description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    @app_commands.describe()
    async def status(self, interaction: Interaction):
        await interaction.response.defer(thinking=True)
        c = []
        mess = ""
        for dict_ in self.c_info:
            key = dict_["db_table"]
            if key == False:
                continue
            try:
                check = db.records(f"SELECT ChannelId FROM {key} WHERE GuildID = ?", interaction.guild_id)
                print(check)
                c.append((dict_["command_name"], "–∞–∫—Ç–∏–≤–Ω–æ") if check else (dict_["command_name"], "–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ"))
            except OperationalError:
                c.append((dict_["command_name"], "–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ"))
        
        for tuple_ in c:
            mess += f"{tuple_[0]}: {tuple_[1]}\n"
        
        await interaction.followup.send(mess)



async def setup(client: commands.Bot):
    await client.add_cog(Commands(client))

